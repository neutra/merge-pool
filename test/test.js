// Generated by CoffeeScript 1.6.2
(function() {
  var MergePool, assert, async, test,
    __slice = [].slice;

  async = require('async');

  assert = require('assert');

  MergePool = require('../lib/merge_pool');

  exports.test = function(test) {
    var check, echo, mp, outputs, push, reset, wait;

    mp = new MergePool;
    outputs = null;
    echo = function(input, cb) {
      var op;

      console.log("accept input: " + input);
      op = function() {
        console.log("echo " + (input + 100));
        return cb(null, input + 100);
      };
      return setTimeout(op, 500);
    };
    wait = function(ms) {
      return function(cb) {
        console.log("wait " + ms + "ms");
        return setTimeout(cb, ms);
      };
    };
    push = function() {
      var args, key;

      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return function(cb) {
        var item, _i, _len;

        for (_i = 0, _len = args.length; _i < _len; _i++) {
          item = args[_i];
          console.log("push " + item + " -> " + key);
          mp.run(key, echo, item, function(err, result) {
            assert.equal(err, null);
            assert.ok(result != null);
            console.log("" + item + " -> " + key + " return " + result);
            return outputs[key].push(result);
          });
        }
        return cb();
      };
    };
    reset = function(cb) {
      console.log("reset");
      outputs = {
        A: [],
        B: []
      };
      return cb();
    };
    check = function(expect) {
      return function(cb) {
        console.log("check");
        assert.deepEqual(outputs, expect);
        return cb();
      };
    };
    return async.series([
      reset, check({
        A: [],
        B: []
      }), push('A', 1, 3, 5), push('B', 2, 4), push('A', 7), check({
        A: [],
        B: []
      }), wait(1000), check({
        A: [101, 101, 101, 101],
        B: [102, 102]
      }), reset, check({
        A: [],
        B: []
      }), push('A', 9), push('B', 6, 8, 10), push('A', 11, 13), check({
        A: [],
        B: []
      }), wait(1000), check({
        A: [109, 109, 109],
        B: [106, 106, 106]
      })
    ], function(err) {
      assert.equal(err, null);
      return test.done();
    });
  };

  if (require.main === module) {
    test = {
      done: function() {
        return console.log("test done");
      }
    };
    exports.test(test);
  }

}).call(this);
